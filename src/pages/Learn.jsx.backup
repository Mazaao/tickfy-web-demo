import { Link, useLocation } from 'react-router-dom'
import { useEffect, useState } from 'react'
import Hero from '../components/sections/Hero'
import Section from '../components/sections/Section'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card'
import { Button } from '../components/ui/button'
import { Badge } from '../components/ui/badge'
import { 
  BookOpen, Layers, Shield, Zap, Coins, TrendingUp, Lock, Users,
  CheckCircle, ArrowRight, Server, Percent, Award, Target, FileText, Globe,
  Code, Network, ChevronDown, ChevronRight, AlertCircle, Settings, DollarSign, Box
} from 'lucide-react'

// Network Overview
const networkOverview = [
  {
    icon: Layers,
    title: 'Specialized Blockchain',
    description: 'Network focused on issuing, trading, and controlling digital tickets (NFTs)',
    features: ['Native smart contracts', 'Protocol rules', 'Automatic fees']
  },
  {
    icon: Coins,
    title: 'Backed Token',
    description: 'TKFYT backed by USDT with minting and burning controlled by the Treasury',
    features: ['Parity 1 USDT ≈ 1M TKFYT', 'Dynamic supply', 'Guaranteed backing']
  },
  {
    icon: Shield,
    title: 'Proof of Stake Consensus',
    description: 'PoS with 66% supermajority for block validation',
    features: ['Safe and efficient', 'Minimum stake 5,000 TKFY', 'Proportional rewards']
  },
  {
    icon: Zap,
    title: 'Smart Fees',
    description: 'Calculated on the total volume of tickets transacted per block',
    features: ['0.10% network', '0.50% validation', 'Total: 0.60%']
  }
]

// Network Architecture
const architectureLayers = [
  {
    title: 'Consensus Layer',
    description: 'Staking, block proposal and validation',
    icon: Shield,
    details: ['TKFY token for staking', 'Supermajority 66%', 'Blocktime 10 seconds', 'Proportional proposal']
  },
  {
    title: 'Execution Layer',
    description: 'Event rules, tickets and fees',
    icon: Settings,
    details: ['Smart contracts', 'Automatic validation', 'Fee distribution', 'NFT management']
  },
  {
    title: 'Application Layer',
    description: 'APIs, wallets, marketplace and indexers',
    icon: Globe,
    details: ['REST & GraphQL APIs', 'Integrated wallets', 'Marketplace', 'Block explorer']
  }
]

// Technical Specifications
const technicalSpecs = [
  {
    category: 'Consensus',
    specs: [
      { label: 'Type', value: 'Proof of Stake (PoS)' },
      { label: 'Minimum Approval', value: '66% (2/3)' },
      { label: 'Blocktime', value: '10 seconds' },
      { label: 'Code Base', value: 'Cosmos SDK + Tendermint' }
    ],
    icon: Server
  },
  {
    category: 'Tokens',
    specs: [
      { label: 'TKFYT (Main)', value: 'Dynamic supply' },
      { label: 'TKFY (Stake)', value: '50,000,000 (fixed)' },
      { label: 'Minimum Stake', value: '5,000 TKFY' },
      { label: 'Base Parity', value: '1 USDT ≈ 1M TKFYT' }
    ],
    icon: Coins
  },
  {
    category: 'Fees',
    specs: [
      { label: 'Network Fee', value: '0.10% of volume' },
      { label: 'Validation Fee', value: '0.50% of volume' },
      { label: 'Total Fee', value: '0.60% per block' },
      { label: 'Ticket Mint', value: '1,000 TKFYT' }
    ],
    icon: Percent
  }
]

// Token System
const tokenSystem = [
  {
    token: 'TKFYT',
    name: 'Main Token (Backed)',
    icon: DollarSign,
    color: 'green',
    features: [
      'Dynamic supply with no fixed limit',
      'Parity: 1 USDT ≈ 1,000,000 TKFYT',
      'Minted when USDT enters the Treasury',
      'Burned when TKFYT is redeemed',
      'Exclusive Treasury control',
      'Used for ticket payments'
    ]
  },
  {
    token: 'TKFY',
    name: 'Stake and Governance Token',
    icon: Award,
    color: 'purple',
    features: [
      'Fixed supply: 50,000,000',
      'Function: security (PoS) and governance',
      'Minimum stake: 5,000 TKFY',
      'Delegable with 20% commission',
      'Voting power in proposals',
      'Validation rewards'
    ]
  }
]

// Reward System
const rewardSystem = {
  title: 'PoS Reward Distribution',
  description: 'Fair and proportional system based on stake',
  formula: 'R = 0.50% × V_block',
  details: [
    {
      title: 'Own Stake',
      description: 'Validator receives 100% of rewards from their stake',
      icon: Award,
      percentage: '100%'
    },
    {
      title: 'Delegated Stake',
      description: 'Validator retains 20% as commission',
      icon: Users,
      percentage: '20%'
    },
    {
      title: 'Delegators',
      description: 'Receive 80% proportionally to stake',
      icon: TrendingUp,
      percentage: '80%'
    }
  ]
}

// Practical Reward Example
const rewardExample = {
  scenario: 'Validator with 50% own stake and 50% delegated',
  validatorStake: '50 TKFY',
  delegatedStake: '50 TKFY',
  totalStake: '100 TKFY',
  blockReward: '1000 TKFYT',
  distribution: [
    { recipient: 'Validator (own stake)', amount: '500 TKFYT', percentage: '50%' },
    { recipient: 'Validator (commission)', amount: '100 TKFYT', percentage: '10%' },
    { recipient: 'Delegator 1 (40%)', amount: '160 TKFYT', percentage: '16%' },
    { recipient: 'Delegator 2 (60%)', amount: '240 TKFYT', percentage: '24%' }
  ],
  validatorTotal: '600 TKFYT'
}

// Data Structures
const dataStructures = [
  {
    type: 'Event',
    icon: FileText,
    fields: [
      { name: 'id', description: 'Unique identifier (UID)' },
      { name: 'name', description: 'Event name' },
      { name: 'image', description: 'Image hash or blob' },
      { name: 'batchPrice', description: 'Current batch price (TKFYT)' },
      { name: 'maxTickets', description: 'Maximum number of tickets' },
      { name: 'soldOut', description: 'Sold out status (true/false)' },
      { name: 'minTradeForceBatchPrice', description: 'Force minimum price on resale' },
      { name: 'eventDate', description: 'Complete date and time' },
      { name: 'mintAddress', description: 'Authorized wallet to mint' },
      { name: 'createDate', description: 'Creation date' }
    ]
  },
  {
    type: 'Ticket',
    icon: Box,
    fields: [
      { name: 'id', description: 'Unique identifier (UID)' },
      { name: 'event', description: 'Linked event ID' },
      { name: 'status', description: 'not used / used' },
      { name: 'mintWalletAddress', description: 'Issuer wallet' },
      { name: 'price', description: 'Initial price (TKFYT)' },
      { name: 'tradable', description: 'Allows trading (true/false)' },
      { name: 'details', description: 'Type, number, seat, box' },
      { name: 'fees', description: 'Array of custom fees (max 50%)' }
    ]
  }
]

// Rules and Governance
const governanceRules = [
  {
    title: 'Event Rules',
    icon: FileText,
    rules: [
      'Only mintAddress can create tickets',
      'Mutable fields until eventDate',
      'Immutable after event date',
      'Status changeable up to 7 days post-event'
    ]
  },
  {
    title: 'Resale Rules',
    icon: TrendingUp,
    rules: [
      'Minimum price if configured (≥ batchPrice)',
      'Sum of fees ≤ 50% of value',
      'Network fees applied automatically',
      'On-chain ownership validation'
    ]
  },
  {
    title: 'Security',
    icon: Shield,
    rules: [
      'Supermajority 66% for consensus',
      'Auditable on-chain Treasury',
      'Immutable core contracts',
      'Slashing for malicious validators'
    ]
  },
  {
    title: 'Governance',
    icon: Users,
    rules: [
      'On-chain proposals with TKFY',
      'Stake-weighted voting',
      'Automatic execution when approved',
      'Community treasury'
    ]
  }
]

// Componente para Cards Expansíveis
const ExpandableCard = ({ title, description, icon: Icon, children }) => {
  const [isExpanded, setIsExpanded] = useState(false)

  return (
    <Card className="border-2 hover:shadow-lg transition-shadow">
      <CardHeader 
        className="cursor-pointer" 
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-2 rounded-lg bg-primary/10">
              <Icon className="h-5 w-5 text-primary" />
            </div>
            <div>
              <CardTitle className="text-lg">{title}</CardTitle>
              <CardDescription className="text-sm">
                {description}
              </CardDescription>
            </div>
          </div>
          {isExpanded ? (
            <ChevronDown className="h-5 w-5 text-muted-foreground" />
          ) : (
            <ChevronRight className="h-5 w-5 text-muted-foreground" />
          )}
        </div>
      </CardHeader>
      
      {isExpanded && (
        <CardContent>
          {children}
        </CardContent>
      )}
    </Card>
  )
}

export default function Learn() {
  const location = useLocation()

  useEffect(() => {
    // Scroll to section based on hash, or top if no hash
    if (location.hash) {
      const element = document.getElementById(location.hash.substring(1))
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' })
      }
    } else {
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }
  }, [location])

  return (
    <>
      <div className="pt-16">
        <Hero
          subtitle="Learn"
          title="Understanding Tickfy Network"
          description="Complete technical documentation about the specialized blockchain for digital tickets, tokens and reward system."
        />

        {/* Section: Network Overview */}
        <Section
          id="overview"
          title="Network Overview"
          subtitle="Core Concepts"
          description="Understand the technical pillars of Tickfy Network"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {networkOverview.map((item, index) => (
              <Card key={index} className="border-2 hover:shadow-lg transition-shadow text-center group">
                <CardHeader>
                  <div className="mx-auto w-12 h-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
                    <item.icon className="h-6 w-6" />
                  </div>
                  <CardTitle className="text-lg">{item.title}</CardTitle>
                  <CardDescription>{item.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {item.features.map((feature, idx) => (
                      <div key={idx} className="flex items-center text-sm text-muted-foreground justify-center">
                        <CheckCircle className="h-3 w-3 text-green-600 mr-2 flex-shrink-0" />
                        {feature}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </Section>

        {/* Section: Architecture */}
        <Section
          id="architecture"
          title="Network Architecture"
          subtitle="System Layers"
          description="Modular structure built on Cosmos SDK + Tendermint"
          background="muted"
        >
          <div className="space-y-8">
            {architectureLayers.map((layer, index) => (
              <Card key={index} className="border-l-4 border-l-primary hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-center gap-4">
                    <div className="flex-shrink-0">
                      <div className="w-12 h-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center">
                        <layer.icon className="h-6 w-6" />
                      </div>
                    </div>
                    <div className="flex-1">
                      <CardTitle className="text-xl">{layer.title}</CardTitle>
                      <CardDescription className="text-base mt-1">
                        {layer.description}
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="ml-16">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      {layer.details.map((detail, idx) => (
                        <div key={idx} className="flex items-center gap-2 text-sm">
                          <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                          <span>{detail}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="mt-8">
            <Card className="border-2 border-blue-200 bg-blue-50/50 dark:bg-blue-950/10">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <AlertCircle className="h-6 w-6 text-blue-600" />
                  <CardTitle>Code Base</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">
                  Tickfy Network is built on <strong>Cosmos SDK</strong> with <strong>Tendermint</strong> consensus, 
                  offering a battle-tested foundation for blockchain infrastructure, with native support for PoS, 
                  on-chain governance and modular architecture.
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        {/* Section: Technical Specifications */}
        <Section
          id="specs"
          title="Technical Specifications"
          subtitle="Network Parameters"
          description="Fundamental protocol values and configurations"
        >
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {technicalSpecs.map((category, index) => (
              <Card key={index} className="border-2 hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <div className="p-3 rounded-lg bg-primary/10">
                      <category.icon className="h-6 w-6 text-primary" />
                    </div>
                    <CardTitle className="text-xl">{category.category}</CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {category.specs.map((spec, idx) => (
                      <div key={idx} className="flex justify-between items-start gap-4 p-2 bg-muted/30 rounded">
                        <span className="text-sm font-medium text-muted-foreground">
                          {spec.label}:
                        </span>
                        <span className="text-sm font-semibold text-right">
                          {spec.value}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </Section>

        {/* Section: Token System */}
        <Section
          id="tokens"
          title="Token System"
          subtitle="TKFYT and TKFY"
          description="Two tokens with complementary functions in the ecosystem"
          background="muted"
        >
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-5xl mx-auto">
            {tokenSystem.map((token, index) => (
              <Card 
                key={index} 
                className="border-2 hover:shadow-lg transition-shadow"
              >
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <div className={`p-3 rounded-lg ${token.color === 'green' ? 'bg-green-100 dark:bg-green-950/20' : 'bg-purple-100 dark:bg-purple-950/20'}`}>
                      <token.icon className={`h-6 w-6 ${token.color === 'green' ? 'text-green-600' : 'text-purple-600'}`} />
                    </div>
                    <div>
                      <CardTitle className="text-2xl flex items-center gap-2">
                        {token.token}
                      </CardTitle>
                      <CardDescription className="text-base">
                        {token.name}
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {token.features.map((feature, idx) => (
                      <div key={idx} className="flex items-start gap-3 text-sm">
                        <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0 mt-0.5" />
                        <span>{feature}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="mt-8 max-w-5xl mx-auto">
            <Card className="border-2 border-yellow-200 bg-yellow-50/50 dark:bg-yellow-950/10">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <Lock className="h-6 w-6 text-yellow-600" />
                  <CardTitle>Treasury and Backing</CardTitle>
                </div>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                    <span>Stores USDT and controls TKFYT</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                    <span>Automatic USDT ↔ TKFYT conversion</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                    <span>Minting and burning on demand</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                    <span>Guaranteed economic parity</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </Section>

        {/* Section: Reward System */}
        <Section
          id="rewards"
          title="PoS Reward System"
          subtitle="Fair and Proportional Distribution"
          description="How validators and delegators are rewarded for security work"
          background="gradient"
        >
          <div className="space-y-8">
            <Card className="border-2 bg-background/50 backdrop-blur">
              <CardHeader className="text-center">
                <CardTitle className="text-2xl">{rewardSystem.title}</CardTitle>
                <CardDescription className="text-base">
                  {rewardSystem.description}
                </CardDescription>
                <div className="mt-4 p-4 bg-muted/50 rounded-lg">
                  <code className="text-lg font-semibold">{rewardSystem.formula}</code>
                  <p className="text-sm text-muted-foreground mt-2">
                    Where V_block = sum of prices of all tickets transacted in the block
                  </p>
                </div>
              </CardHeader>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {rewardSystem.details.map((detail, index) => (
                <Card key={index} className="border-2 hover:shadow-lg transition-shadow text-center group">
                  <CardHeader>
                    <div className="mx-auto w-16 h-16 rounded-full bg-purple-500 text-white flex items-center justify-center mb-4 group-hover:scale-110 transition-transform">
                      <detail.icon className="h-8 w-8" />
                    </div>
                    <CardTitle className="text-lg">{detail.title}</CardTitle>
                    <CardDescription className="text-sm">
                      {detail.description}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-3xl font-bold text-purple-600">
                      {detail.percentage}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Practical Example */}
            <Card className="border-2 border-green-200 bg-green-50/50 dark:bg-green-950/10">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="h-6 w-6 text-green-600" />
                  Practical Example
                </CardTitle>
                <CardDescription className="text-base">
                  {rewardExample.scenario}
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg">
                  <div>
                    <p className="text-xs text-muted-foreground">Own Stake</p>
                    <p className="text-lg font-bold">{rewardExample.validatorStake}</p>
                  </div>
                  <div>
                    <p className="text-xs text-muted-foreground">Delegated Stake</p>
                    <p className="text-lg font-bold">{rewardExample.delegatedStake}</p>
                  </div>
                  <div>
                    <p className="text-xs text-muted-foreground">Total Stake</p>
                    <p className="text-lg font-bold">{rewardExample.totalStake}</p>
                  </div>
                  <div>
                    <p className="text-xs text-muted-foreground">Block Reward</p>
                    <p className="text-lg font-bold">{rewardExample.blockReward}</p>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-semibold">Distribution:</h4>
                  {rewardExample.distribution.map((dist, index) => (
                    <div key={index} className="flex justify-between items-center p-3 bg-white dark:bg-slate-900 rounded-lg">
                      <span className="text-sm">{dist.recipient}</span>
                      <div className="flex items-center gap-3">
                        <Badge variant="outline">{dist.percentage}</Badge>
                        <span className="font-semibold">{dist.amount}</span>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="p-4 bg-green-100 dark:bg-green-950/30 rounded-lg">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Validator Total:</span>
                    <span className="text-xl font-bold text-green-600">
                      {rewardExample.validatorTotal}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </Section>

        {/* Section: Data Structures */}
        <Section
          id="data-structures"
          title="Data Structures"
          subtitle="On-Chain Data Types"
          description="Format of events and tickets stored on the blockchain"
          background="muted"
        >
          <div className="space-y-6">
            {dataStructures.map((structure, index) => (
              <ExpandableCard
                key={index}
                title={structure.type}
                description={`Fields and data structure for ${structure.type.toLowerCase()}`}
                icon={structure.icon}
              >
                <div className="space-y-3">
                  {structure.fields.map((field, idx) => (
                    <div key={idx} className="flex items-start gap-4 p-3 bg-muted/30 rounded-lg">
                      <code className="text-sm font-semibold text-primary flex-shrink-0 mt-0.5">
                        {field.name}
                      </code>
                      <span className="text-sm text-muted-foreground">
                        {field.description}
                      </span>
                    </div>
                  ))}
                </div>
              </ExpandableCard>
            ))}
          </div>
        </Section>

        {/* Section: Rules and Governance */}
        <Section
          id="governance"
          title="Rules and Governance"
          subtitle="Controls and Security"
          description="Business rules and network governance mechanisms"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {governanceRules.map((category, index) => (
              <Card key={index} className="border-2 hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <div className="p-3 rounded-lg bg-primary/10">
                      <category.icon className="h-6 w-6 text-primary" />
                    </div>
                    <CardTitle className="text-xl">{category.title}</CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {category.rules.map((rule, idx) => (
                      <div key={idx} className="flex items-start gap-3 text-sm">
                        <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0 mt-0.5" />
                        <span>{rule}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="mt-8 max-w-4xl mx-auto">
            <Card className="border-2 border-red-200 bg-red-50/50 dark:bg-red-950/10">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <AlertCircle className="h-6 w-6 text-red-600" />
                  <CardTitle>Slashing and Penalties</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Validators who behave maliciously or remain inactive for extended periods 
                  are subject to automatic penalties (slashing), including partial stake loss 
                  and temporary or permanent suspension.
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-red-600 flex-shrink-0" />
                    <span>Double signing → Severe slash</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-red-600 flex-shrink-0" />
                    <span>Excessive downtime → Penalty</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-red-600 flex-shrink-0" />
                    <span>Delegator protection</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <CheckCircle className="h-4 w-4 text-red-600 flex-shrink-0" />
                    <span>Transparent auditing</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </Section>

        {/* Section: Additional Resources */}
        <Section
          title="Explore More"
          subtitle="Resources and Documentation"
          description="Deepen your knowledge with our tools and guides"
          background="muted"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto">
            <Card className="border-2 hover:shadow-lg transition-shadow text-center">
              <CardHeader>
                <div className="mx-auto w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-950/20 flex items-center justify-center mb-3">
                  <Code className="h-6 w-6 text-blue-600" />
                </div>
                <CardTitle>API Documentation</CardTitle>
                <CardDescription>
                  Complete REST and GraphQL API reference
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Link to="/developers#apis">
                  <Button variant="outline" className="w-full">
                    View Documentation
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </Link>
              </CardContent>
            </Card>

            <Card className="border-2 hover:shadow-lg transition-shadow text-center">
              <CardHeader>
                <div className="mx-auto w-12 h-12 rounded-full bg-purple-100 dark:bg-purple-950/20 flex items-center justify-center mb-3">
                  <Network className="h-6 w-6 text-purple-600" />
                </div>
                <CardTitle>Blockchain Explorer</CardTitle>
                <CardDescription>
                  Explore blocks, transactions and statistics
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button variant="outline" className="w-full">
                  Access Explorer
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardContent>
            </Card>

            <Card className="border-2 hover:shadow-lg transition-shadow text-center">
              <CardHeader>
                <div className="mx-auto w-12 h-12 rounded-full bg-green-100 dark:bg-green-950/20 flex items-center justify-center mb-3">
                  <BookOpen className="h-6 w-6 text-green-600" />
                </div>
                <CardTitle>Practical Guides</CardTitle>
                <CardDescription>
                  Step-by-step tutorials to get started
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Link to="/use">
                  <Button variant="outline" className="w-full">
                    View Guides
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </div>
        </Section>

        {/* Section: Final CTA */}
        <Section
          title="Ready to Get Started?"
          subtitle="Join the Ecosystem"
          description="Start using, developing or validating on Tickfy Network"
        >
          <div className="text-center space-y-6">
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link to="/use">
                <Button size="lg" className="text-lg px-8">
                  Start Using
                  <ArrowRight className="ml-2 h-5 w-5" />
                </Button>
              </Link>
              <Link to="/developers">
                <Button variant="outline" size="lg" className="text-lg px-8">
                  Developer Documentation
                  <Code className="ml-2 h-5 w-5" />
                </Button>
              </Link>
            </div>
            <div className="flex flex-wrap justify-center gap-2">
              <Badge variant="outline">Cosmos SDK</Badge>
              <Badge variant="outline">Proof of Stake</Badge>
              <Badge variant="outline">Token Lastreado</Badge>
              <Badge variant="outline">Taxas 0,60%</Badge>
              <Badge variant="outline">Open Source</Badge>
            </div>
          </div>
        </Section>
      </div>
    </>
  )
}
